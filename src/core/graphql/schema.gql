# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BaseInfoModel {
  name: String!
  version: String!
}

input ChangeEmailInput {
  newEmail: String!
  newEmailToken: String
  oldEmailToken: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeProfileInfoInput {
  bio: String!
  displayName: String!
  username: String!
}

input ChangeStreamInfoInput {
  categoryId: String
  id: ID!
  isArchived: Boolean
  isPrivate: Boolean
  password: String
  title: String
}

input CreateUserInput {
  displayName: String!
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeactivateAccountInput {
  email: String!
  password: String!
  token: String
}

type DeviceModel {
  browser: BaseInfoModel!
  model: String!
  os: BaseInfoModel!
  type: String!
  vendor: String!
}

input EnableTotpInput {
  secret: String!
  token: String!
}

input FiltersInput {
  limit: Float
  page: Float
  searchTerm: String
}

type LocationModel {
  city: String!
  country: String!
  latidute: Float!
  longitude: Float!
}

input LoginInput {
  email: String!
  password: String!
  pin: String
}

type MetaModel {
  limit: Int!
  page: Int!
  total: Int!
}

type Mutation {
  addSocialLink(data: SocialLinkInput!): Boolean!
  changeEmail(data: ChangeEmailInput!): Boolean!
  changePassword(data: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  changeStreamInfo(data: ChangeStreamInfoInput!): Boolean!
  changeStreamThumbnail(id: String!, thumbnail: Upload!): Boolean!
  createIngress(ingressType: Float!): Boolean!
  deactivateAccount(data: DeactivateAccountInput!): UserModel!
  disableTotp: Boolean!
  enableTotp(data: EnableTotpInput!): Boolean!
  loginUser(data: LoginInput!): UserModel!
  logoutUser: Boolean!
  newPassword(data: NewPasswordInput!): Boolean!
  registerUser(data: CreateUserInput!): Boolean!
  removeProfileAvatar: Boolean!
  removeSession(id: String!): Boolean!
  removeSocialLink(id: String!): Boolean!
  removeStreamThumbnail(id: String!): Boolean!
  reorderSocialLinks(data: [SocialLinkOrderInput!]!): Boolean!
  resetPassword(data: ResetPasswordInput!): Boolean!
  sendLinkToOldEmail: Boolean!
  updateSocialLink(data: SocialLinkInput!, id: String!): Boolean!
  verifyAccount(data: VerificationInput!): Boolean!
}

input NewPasswordInput {
  password: String!
  token: String!
}

type Query {
  findAllStreams(filters: FiltersInput!): StreamResponseModel!
  findCurrentSession: SessionModel!
  findProfile: UserModel!
  findRandomStream: StreamModel!
  findSessionsByUser: [SessionModel!]!
  generateTotpSecret: TotpModel!
  mySocialLinks: [SocialLinkModel!]!
}

input ResetPasswordInput {
  email: String!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: DateTime!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

type SocialLinkModel {
  createdAt: DateTime!
  id: ID!
  position: Float!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

input SocialLinkOrderInput {
  id: String!
  postition: Float!
}

type StreamModel {
  archiveUrl: String
  categoryId: String
  createdAt: DateTime!
  description: String
  duration: Int!
  endedAt: DateTime!
  id: ID!
  ingressId: String
  isArchived: Boolean!
  isLive: Boolean!
  isPrivate: Boolean
  isScheduled: Boolean
  password: String
  peakViewersCount: Int!
  scheduledStartAt: DateTime
  serverUrl: String
  startedAt: DateTime!
  streamKey: String
  thumbnailId: String
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
  userId: String!
  viewersCount: Int!
}

type StreamResponseModel {
  items: [StreamModel!]!
  meta: MetaModel!
}

type TotpModel {
  qrCodeUrl: String!
  secret: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserModel {
  avatar: String
  bio: String
  createdAt: DateTime!
  deacivatedAt: DateTime!
  displayName: String!
  email: String!
  id: ID!
  isDeactivated: Boolean!
  isEmailVerified: Boolean!
  isTotpEnable: Boolean!
  isVerified: Boolean!
  password: String!
  socialLinks: [SocialLinkModel!]!
  streamId: ID
  totpSecret: String!
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}